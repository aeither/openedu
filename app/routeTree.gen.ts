/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TermsOfServiceImport } from './routes/terms-of-service'
import { Route as SettingsImport } from './routes/settings'
import { Route as RedirectImport } from './routes/redirect'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as PostsImport } from './routes/posts'
import { Route as PortfolioImport } from './routes/portfolio'
import { Route as PlaygroundImport } from './routes/playground'
import { Route as LearnImport } from './routes/learn'
import { Route as HomeImport } from './routes/home'
import { Route as EarnImport } from './routes/earn'
import { Route as ChatImport } from './routes/chat'
import { Route as CdpImport } from './routes/cdp'
import { Route as BalanceImport } from './routes/balance'
import { Route as IndexImport } from './routes/index'
import { Route as QuizIndexImport } from './routes/quiz.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as QuizQuizIdImport } from './routes/quiz.$quizId'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as NotesNoteIdImport } from './routes/notes.$noteId'
import { Route as MerchantIdImport } from './routes/merchant.$id'
import { Route as CourseIdImport } from './routes/course.$id'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'

// Create/Update Routes

const TermsOfServiceRoute = TermsOfServiceImport.update({
  id: '/terms-of-service',
  path: '/terms-of-service',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const PostsRoute = PostsImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const PortfolioRoute = PortfolioImport.update({
  id: '/portfolio',
  path: '/portfolio',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const LearnRoute = LearnImport.update({
  id: '/learn',
  path: '/learn',
  getParentRoute: () => rootRoute,
} as any)

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const EarnRoute = EarnImport.update({
  id: '/earn',
  path: '/earn',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const CdpRoute = CdpImport.update({
  id: '/cdp',
  path: '/cdp',
  getParentRoute: () => rootRoute,
} as any)

const BalanceRoute = BalanceImport.update({
  id: '/balance',
  path: '/balance',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const QuizIndexRoute = QuizIndexImport.update({
  id: '/quiz/',
  path: '/quiz/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)

const QuizQuizIdRoute = QuizQuizIdImport.update({
  id: '/quiz/$quizId',
  path: '/quiz/$quizId',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRoute,
} as any)

const NotesNoteIdRoute = NotesNoteIdImport.update({
  id: '/notes/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => rootRoute,
} as any)

const MerchantIdRoute = MerchantIdImport.update({
  id: '/merchant/$id',
  path: '/merchant/$id',
  getParentRoute: () => rootRoute,
} as any)

const CourseIdRoute = CourseIdImport.update({
  id: '/course/$id',
  path: '/course/$id',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/balance': {
      id: '/balance'
      path: '/balance'
      fullPath: '/balance'
      preLoaderRoute: typeof BalanceImport
      parentRoute: typeof rootRoute
    }
    '/cdp': {
      id: '/cdp'
      path: '/cdp'
      fullPath: '/cdp'
      preLoaderRoute: typeof CdpImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/earn': {
      id: '/earn'
      path: '/earn'
      fullPath: '/earn'
      preLoaderRoute: typeof EarnImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/learn': {
      id: '/learn'
      path: '/learn'
      fullPath: '/learn'
      preLoaderRoute: typeof LearnImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/portfolio': {
      id: '/portfolio'
      path: '/portfolio'
      fullPath: '/portfolio'
      preLoaderRoute: typeof PortfolioImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/terms-of-service': {
      id: '/terms-of-service'
      path: '/terms-of-service'
      fullPath: '/terms-of-service'
      preLoaderRoute: typeof TermsOfServiceImport
      parentRoute: typeof rootRoute
    }
    '/course/$id': {
      id: '/course/$id'
      path: '/course/$id'
      fullPath: '/course/$id'
      preLoaderRoute: typeof CourseIdImport
      parentRoute: typeof rootRoute
    }
    '/merchant/$id': {
      id: '/merchant/$id'
      path: '/merchant/$id'
      fullPath: '/merchant/$id'
      preLoaderRoute: typeof MerchantIdImport
      parentRoute: typeof rootRoute
    }
    '/notes/$noteId': {
      id: '/notes/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsImport
    }
    '/quiz/$quizId': {
      id: '/quiz/$quizId'
      path: '/quiz/$quizId'
      fullPath: '/quiz/$quizId'
      preLoaderRoute: typeof QuizQuizIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsImport
    }
    '/quiz/': {
      id: '/quiz/'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof QuizIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PostsRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/balance': typeof BalanceRoute
  '/cdp': typeof CdpRoute
  '/chat': typeof ChatRoute
  '/earn': typeof EarnRoute
  '/home': typeof HomeRoute
  '/learn': typeof LearnRoute
  '/playground': typeof PlaygroundRoute
  '/portfolio': typeof PortfolioRoute
  '/posts': typeof PostsRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect': typeof RedirectRoute
  '/settings': typeof SettingsRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/course/$id': typeof CourseIdRoute
  '/merchant/$id': typeof MerchantIdRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/quiz/$quizId': typeof QuizQuizIdRoute
  '/posts/': typeof PostsIndexRoute
  '/quiz': typeof QuizIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/balance': typeof BalanceRoute
  '/cdp': typeof CdpRoute
  '/chat': typeof ChatRoute
  '/earn': typeof EarnRoute
  '/home': typeof HomeRoute
  '/learn': typeof LearnRoute
  '/playground': typeof PlaygroundRoute
  '/portfolio': typeof PortfolioRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect': typeof RedirectRoute
  '/settings': typeof SettingsRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/course/$id': typeof CourseIdRoute
  '/merchant/$id': typeof MerchantIdRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/quiz/$quizId': typeof QuizQuizIdRoute
  '/posts': typeof PostsIndexRoute
  '/quiz': typeof QuizIndexRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/balance': typeof BalanceRoute
  '/cdp': typeof CdpRoute
  '/chat': typeof ChatRoute
  '/earn': typeof EarnRoute
  '/home': typeof HomeRoute
  '/learn': typeof LearnRoute
  '/playground': typeof PlaygroundRoute
  '/portfolio': typeof PortfolioRoute
  '/posts': typeof PostsRouteWithChildren
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/redirect': typeof RedirectRoute
  '/settings': typeof SettingsRoute
  '/terms-of-service': typeof TermsOfServiceRoute
  '/course/$id': typeof CourseIdRoute
  '/merchant/$id': typeof MerchantIdRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/quiz/$quizId': typeof QuizQuizIdRoute
  '/posts/': typeof PostsIndexRoute
  '/quiz/': typeof QuizIndexRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/balance'
    | '/cdp'
    | '/chat'
    | '/earn'
    | '/home'
    | '/learn'
    | '/playground'
    | '/portfolio'
    | '/posts'
    | '/privacy-policy'
    | '/redirect'
    | '/settings'
    | '/terms-of-service'
    | '/course/$id'
    | '/merchant/$id'
    | '/notes/$noteId'
    | '/posts/$postId'
    | '/quiz/$quizId'
    | '/posts/'
    | '/quiz'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/balance'
    | '/cdp'
    | '/chat'
    | '/earn'
    | '/home'
    | '/learn'
    | '/playground'
    | '/portfolio'
    | '/privacy-policy'
    | '/redirect'
    | '/settings'
    | '/terms-of-service'
    | '/course/$id'
    | '/merchant/$id'
    | '/notes/$noteId'
    | '/posts/$postId'
    | '/quiz/$quizId'
    | '/posts'
    | '/quiz'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/balance'
    | '/cdp'
    | '/chat'
    | '/earn'
    | '/home'
    | '/learn'
    | '/playground'
    | '/portfolio'
    | '/posts'
    | '/privacy-policy'
    | '/redirect'
    | '/settings'
    | '/terms-of-service'
    | '/course/$id'
    | '/merchant/$id'
    | '/notes/$noteId'
    | '/posts/$postId'
    | '/quiz/$quizId'
    | '/posts/'
    | '/quiz/'
    | '/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BalanceRoute: typeof BalanceRoute
  CdpRoute: typeof CdpRoute
  ChatRoute: typeof ChatRoute
  EarnRoute: typeof EarnRoute
  HomeRoute: typeof HomeRoute
  LearnRoute: typeof LearnRoute
  PlaygroundRoute: typeof PlaygroundRoute
  PortfolioRoute: typeof PortfolioRoute
  PostsRoute: typeof PostsRouteWithChildren
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  RedirectRoute: typeof RedirectRoute
  SettingsRoute: typeof SettingsRoute
  TermsOfServiceRoute: typeof TermsOfServiceRoute
  CourseIdRoute: typeof CourseIdRoute
  MerchantIdRoute: typeof MerchantIdRoute
  NotesNoteIdRoute: typeof NotesNoteIdRoute
  QuizQuizIdRoute: typeof QuizQuizIdRoute
  QuizIndexRoute: typeof QuizIndexRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BalanceRoute: BalanceRoute,
  CdpRoute: CdpRoute,
  ChatRoute: ChatRoute,
  EarnRoute: EarnRoute,
  HomeRoute: HomeRoute,
  LearnRoute: LearnRoute,
  PlaygroundRoute: PlaygroundRoute,
  PortfolioRoute: PortfolioRoute,
  PostsRoute: PostsRouteWithChildren,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  RedirectRoute: RedirectRoute,
  SettingsRoute: SettingsRoute,
  TermsOfServiceRoute: TermsOfServiceRoute,
  CourseIdRoute: CourseIdRoute,
  MerchantIdRoute: MerchantIdRoute,
  NotesNoteIdRoute: NotesNoteIdRoute,
  QuizQuizIdRoute: QuizQuizIdRoute,
  QuizIndexRoute: QuizIndexRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/balance",
        "/cdp",
        "/chat",
        "/earn",
        "/home",
        "/learn",
        "/playground",
        "/portfolio",
        "/posts",
        "/privacy-policy",
        "/redirect",
        "/settings",
        "/terms-of-service",
        "/course/$id",
        "/merchant/$id",
        "/notes/$noteId",
        "/quiz/$quizId",
        "/quiz/",
        "/posts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/balance": {
      "filePath": "balance.tsx"
    },
    "/cdp": {
      "filePath": "cdp.tsx"
    },
    "/chat": {
      "filePath": "chat.tsx"
    },
    "/earn": {
      "filePath": "earn.tsx"
    },
    "/home": {
      "filePath": "home.tsx"
    },
    "/learn": {
      "filePath": "learn.tsx"
    },
    "/playground": {
      "filePath": "playground.tsx"
    },
    "/portfolio": {
      "filePath": "portfolio.tsx"
    },
    "/posts": {
      "filePath": "posts.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/terms-of-service": {
      "filePath": "terms-of-service.tsx"
    },
    "/course/$id": {
      "filePath": "course.$id.tsx"
    },
    "/merchant/$id": {
      "filePath": "merchant.$id.tsx"
    },
    "/notes/$noteId": {
      "filePath": "notes.$noteId.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/quiz/$quizId": {
      "filePath": "quiz.$quizId.tsx"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/quiz/": {
      "filePath": "quiz.index.tsx"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
